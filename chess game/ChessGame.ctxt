#BlueJ class context
comment0.params=
comment0.target=ChessGame()
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ ChessGame\ accpets\ no\ values\n
comment1.params=
comment1.target=int\ getnumTurns()
comment10.params=board\ piece
comment10.target=boolean\ isAlive(ChessBoard,\ Chesspiece)
comment10.text=\n\ This\ method\ checks\ to\ see\ if\ a\ cheese\ piece\ is\ alive\n\ Will\ accept\ an\ object\ of\ ChessBoard\ and\ Chesspiece\n\ returns\ true\ if\ it\ was\ found\ and\ false\ if\ not\n
comment11.params=
comment11.target=boolean\ isCheckMate()
comment12.params=r\ c\ playerKing\ enermy
comment12.target=boolean\ KnightPermutation(int,\ int,\ King,\ java.lang.String)
comment12.text=\n\ this\ is\ a\ helper\ function\ for\ checkmate\ it\ will\ return\ false\ if\ there\ is\ a\ way\ for\ knight\ to\ save\ king,\ true\ if\ it\ cannot\n
comment13.params=r\ c\ playerKing\ enermy
comment13.target=boolean\ rookPermutation(int,\ int,\ King,\ java.lang.String)
comment13.text=\ \n\ this\ is\ a\ helper\ function\ for\ checkmate\ it\ will\ return\ false\ if\ there\ is\ a\ way\ for\ rook\ to\ save\ king,\ true\ if\ it\ cannot\n
comment14.params=r\ c\ playerKing\ enermy
comment14.target=boolean\ bishopPermutation(int,\ int,\ King,\ java.lang.String)
comment14.text=\n\ helper\ function\ for\ checkmate\ generates\ permutations\ to\ see\ if\ bishop\ can\ save\ king\n
comment15.params=r\ c\ playerKing\ enermy
comment15.target=boolean\ queenPermutation(int,\ int,\ King,\ java.lang.String)
comment15.text=\n\ helper\ function\ for\ checkmate\ checks\ to\ see\ if\ the\ queen\ can\ save\ the\ king\n\ \n
comment16.params=r\ c\ playerKing\ enermy
comment16.target=boolean\ kingPermutation(int,\ int,\ King,\ java.lang.String)
comment16.text=\n\ helper\ function\ for\ checkmate\ checks\ to\ see\ if\ king\ can\ save\ itself\n
comment17.params=row\ col\ sourceRow\ sourceCol\ enermy\ playerking
comment17.target=boolean\ moveEndangerKing(int,\ int,\ int,\ int,\ java.lang.String,\ King)
comment17.text=\n\ this\ is\ helper\ for\ playgame\ it\ will\ check\ to\ see\ if\ moving\ another\ piece\ will\ put\ the\ king\ into\ check\ the\ next\ round\n\ returns\ false\ for\ not\ endageringking\ and\ true\ for\ endangering\ king\n
comment2.params=
comment2.target=void\ restart()
comment2.text=\n\ this\ method\ restarts\ the\ game\n
comment3.params=
comment3.target=Chesspiece\ getPlayerOneKing()
comment3.text=\n\ this\ method\ returns\ playerOneking\n
comment4.params=
comment4.target=Chesspiece\ getPlayerTwoKing()
comment4.text=\n\ this\ method\ returns\ playerTwoking\n
comment5.params=
comment5.target=boolean\ HasPlayerLost()
comment5.text=\n\ checks\ to\ see\ if\ player\ has\ lost\ due\ to\ checkmate\n
comment6.params=choice\ row\ col\ sourceRow\ sourceCol
comment6.target=boolean\ playturn(java.lang.String,\ int,\ int,\ int,\ int)
comment6.text=\n\ this\ method\ plays\ one\ turn\n
comment7.params=
comment7.target=ChessBoard\ getboard()
comment7.text=\n\ This\ method\ returns\ the\ chess\ board\ that\ ChessGame\ initialized\n\ as\ an\ object\ of\ ChessBoard\ class\n
comment8.params=
comment8.target=void\ setupGame()
comment8.text=\n\ this\ method\ creates\ the\ game\ board\n
comment9.params=
comment9.target=boolean\ kingsAlive()
numComments=18
